<%- include('../layouts/user/header.ejs') -%>


<main class="main">
    <div class="page-header text-center" style="background-image: url('assets/images/page-header-bg.jpg')">
        <div class="container">
            <h1 class="page-title">Checkout</h1>
        </div><!-- End .container -->
    </div><!-- End .page-header -->
    <nav aria-label="breadcrumb" class="breadcrumb-nav">
        <div class="container">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/cart">Cart</a></li>
                <li class="breadcrumb-item active" aria-current="page">Checkout</li>
            </ol>
        </div><!-- End .container -->
    </nav><!-- End .breadcrumb-nav -->

    <div class="page-content">
        <div class="checkout">
            <div class="container">
                <div class="coupon-apply d-flex">
                <div class="checkout-discount  ">
                    <form action="#">
                        <div style="position: relative;">
                            <input type="text" class="form-control" id="checkout-discount-input" placeholder="Enter coupon code" required style="width: 250px;">
                            <span id="clear-coupon" style="position: absolute; right: 10px; top: 50%; transform: translateY(-50%); cursor: pointer; font-size: 18px; color: rgb(107, 107, 107); display: none;">&times;</span>
                        </div>
                    </form>
                    
                </div><!-- End .checkout-discount -->
                <div class="apply ml-3">
                    <a href="#"><button class="btn btn-primary ">Apply</button></a>
                </div>
            </div>
            <div>
                <p class="coupon-para pl-5 ml-2" style="color: #c96;">Available Coupons</p>
                <% if (coupon.length > 0) { %>
                    <% coupon.forEach(coupon => { %>
                        <div class=" coupon-available pl-5 ml-4">
                            <strong><%= coupon.name %></strong> - Minimum Order: ₹<%= coupon.minimumPrice %>, Offer Price: ₹<%= coupon.offerPrice %>
                            (Exp on:<%= coupon.formattedExpireOn %>)
                        </div>
                    <% }) %>
                <% } else { %>
                        <p class="not-available" style="font-size: small; color: red;">coupons are not available</p>
                <% } %>
            </div>
            
            
                <form id="checkout-form" action="/order-success" method="POST">
                    <input type="hidden" name="cartId" value="<%= cartId %>">
                    <div class="row">
                        <!-- Left Column: Manage Addresses -->
                        <div class="col-lg-9" style="border: 0.5px solid #c7c0c0;">
                            <h1 class="checkout-title text-center">Billing Details</h1>
                            <div class="card-body" style="width: 100%; margin-bottom: 70px;">
                                <h2 class="card-title" style="margin-top: 20px; margin-left: 20px;">Delivery Address</h2>
                
                                <div>
                                    <a href="/add-address"><button type="button" class="btn btn-primary btn-lg" style="width: 25%; margin-top: 25px;">Add New Address</button></a>
                                </div>
                
                                <!-- Displaying Addresses -->
                                <% addresses.forEach(function(address) { %>
                                    <div class="address-main <%= address.isActive ? 'active-address' : '' %>" style="border: 1px solid #cdc9c9; width: 890px; margin-top: 35px; padding: 15px; position: relative;">
                                        <!-- Address Type and 3-Dot Menu -->
                                        <div class="row">
                                            <div class="col-12 d-flex justify-content-between align-items-center">
                                                <!-- Type Div -->
                                                <div style="padding: 3px 8px; color: black; border-radius: 5px; font-size: 14px; background-color: rgb(228, 228, 228); font-weight: bolder;">
                                                    <span class=""><%= address.addressType || "No Type Provided" %></span><span class="text-success fw-bolder"><%= address.isActive ? '(Primary)' :'' %></span>
                                                </div>
                
                                                <!-- Edit/Delete Options (3-Dot Dropdown) -->
                                                <div class="dropdown" style="background-color: transparent; padding: 5px; border-radius: 5px;">
                                                    <div class="dropdown-content">
                                                        <a href="/edit-address/<%= address._id %>" style="font-size: 15px;">Edit</a>
                                                        <label class="radio-label">
                                                            <input type="radio" class="custom-radio" name="addressId" value="<%= address._id %>" <%= address.isActive ? 'checked' : '' %> >
                                                        </label>

                                                    </div>
                                                </div> <!-- end dropdown -->
                                            </div>
                                        </div>
                
                                        <!-- Name and Phone Row -->
                                        <div class="row">
                                            <div class="col-6">
                                                <strong>Name: </strong><%= address.name %>
                                            </div>
                                            <div class="col-6">
                                                <strong>Phone: </strong><%= address.phone %>
                                            </div>
                                        </div>
                                        <!-- Locality, Landmark, City, and State Row -->
                                        <div class="row">
                                            <div class="col-6">
                                                <strong>Locality: </strong><%= address.locality %>
                                            </div>
                                            <div class="col-6">
                                                <strong>Landmark: </strong><%= address.landmark %>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-6">
                                                <strong>City: </strong><%= address.city %>
                                            </div>
                                            <div class="col-6">
                                                <strong>State: </strong><%= address.state %>
                                            </div>
                                        </div>
                                        <!-- Pincode Row -->
                                        <div class="row">
                                            <div class="col-12">
                                                <strong>Pincode: </strong><%= address.pincode %>
                                            </div>
                                        </div>
                                    </div> <!-- end address-main -->
                                <% }); %>
                            </div>
                        </div><!-- End .col-lg-9 -->
                
                        <!-- Right Column: Order Summary -->
                        <aside class="col-lg-3">
                            <div class="summary">
                                <h3 class="summary-title">Your Order</h3><!-- End .summary-title -->
                
                                <table class="table table-summary">
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th>Qty</th>
                                            <th>Subtotal</th>
                                        </tr>
                                    </thead>
                                    <tbody id="cart-summary-body">
                                        <% cartItems.forEach(item => { %>
                                        <tr>
                                            <td><%= item.productId.productName %></td>
                                            <td id="summary-qty-<%= item.productId._id %>">
                                                <%= item.quantity %>
                                            </td>
                                            <td class="summary-total-col" id="summary-subtotal-<%= item.productId._id %>">
                                                ₹<%= item.totalPrice %>
                                            </td>
                                        </tr>
                                        <% }); %>
                                        <tr>
                                            <td>Delivery Charge:</td>
                                            <td></td>
                                            <td>Free</td>
                                        </tr>
                                        <tr>
                                            <td id="applied-coupon-name">No Coupon Applied</td>
                                            <td></td>
                                            <td id="coupon-discount">₹0</td>
                                        </tr>
                                        <tr>
                                            <td id="offer-discount">Discount :</td>
                                            <td></td>
                                            <td id="discount-value"><%= totalOfferDiscount  %></td>
                                        </tr>
                                        
                                        <tr class="summary-total">
                                            <td>Total:</td>
                                            <td></td>
                                            <td id="grand-total">₹<%= total %></td>
                                        </tr>
                                        <!-- End .summary-total -->
                                    </tbody>
                                </table>
                                <!-- End .table table-summary -->
                
                                <div class="accordion-summary" id="accordion-payment">
                                    <div class="card mt-2">
                                        <h5>Payment Methods</h5>
                                    </div>
                                    <div class="cart-main ml-3">
                                        <div class="card">
                                            <div class="card-header d-flex mt-1" id="heading-2">
                                                <input type="radio" class="radio-btn" name="paymentMethod" value="online-payment">
                                                <h2 class="card-title ml-2"> Online payment</h2>
                                            </div><!-- End .card-header -->
                                        </div><!-- End .card -->
                
                                        <div class="card">
                                            <div class="card-header d-flex mt-1" id="heading-3">
                                                <input type="radio" class="radio-btn" name="paymentMethod" value="cash-on-delivery">
                                                <h2 class="card-title ml-2"> Cash on delivery</h2>
                                            </div><!-- End .card-header -->
                                        </div><!-- End .card -->
                
                                        <div class="card">
                                            <div class="card-header d-flex mt-1" id="heading-4">
                                                <input type="radio" class="radio-btn" name="paymentMethod" value="wallet">
                                                <h2 class="card-title ml-2"> Wallet</h2>
                                            </div><!-- End .card-header -->
                                        </div><!-- End .card -->
                                    </div><!-- End .cart-main -->
                
                                    <button type="submit" class="btn btn-outline-primary-2 btn-order btn-block mt-2">
                                        <span class="btn-text">Place Order</span>
                                        <span class="btn-hover-text">Proceed to Checkout</span>
                                    </button>
                                </div><!-- End .accordion -->
                            </div><!-- End .summary -->
                        </aside><!-- End .col-lg-3 -->
                    </div><!-- End .row -->
                </form>
                
            </div><!-- End .container -->
        </div><!-- End .checkout -->
    </div><!-- End .page-content -->
</main><!-- End .main -->

<style>
    .dropdown-content {
        display: flex;
    }
    
    .edit-content {
        display: flex;
        align-items: center;
        padding: 8px 16px;
        text-decoration: none;
        color: #e09e41;
        font-size: 15px;
    }

    .radio-label {
        display: flex;
        align-items: center;
        margin: 0;
        padding: 0;
    }

    .custom-radio {
        width: 20px; /* Adjust size here */
        height: 20px; /* Adjust size here */
        margin-left: 10px; /* Space between text and radio button */
        cursor: pointer;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
   document.getElementById('checkout-form').addEventListener('submit', async function(event) {
    event.preventDefault();  // Prevent default form submission

    const addressSelected = document.querySelector('input[name="addressId"]:checked');
    const paymentMethodSelected = document.querySelector('input[name="paymentMethod"]:checked');
    const totalPrice = parseFloat(document.querySelector('#grand-total').innerText.replace('₹', ''));
    let couponCode = document.querySelector('#applied-coupon-name').innerText;
    couponCode = couponCode === 'No Coupon Applied' ? null : couponCode;  // Handle 'No Coupon Applied' case
    console.log("couponCode",couponCode);
    


    // Check if no address is selected
    if (!addressSelected) {
        Swal.fire({
            icon: 'warning',
            title: 'No Address Selected',
            text: 'Please select a delivery address before placing your order.',
        });
        return;
    }

    // Check if no payment method is selected
    if (!paymentMethodSelected) {
        Swal.fire({
            icon: 'warning',
            title: 'No Payment Method Selected',
            text: 'Please select a payment method before placing your order.',
        });
        return;
    }
    

    // Handle Razorpay payment if 'online-payment' is selected
    // Handle Razorpay payment if 'online-payment' is selected
// Handle Razorpay payment if 'online-payment' is selected
if (paymentMethodSelected.value === 'online-payment') {
    try {
        const response = await axios.post('/create-order', {
            amount: Math.round(totalPrice * 100),  // Total amount in paisa (this is before applying coupon in backend)
            couponCode: couponCode === 'No Coupon Applied' ? null : couponCode,  // Pass the applied coupon code
            cartId: "<%= cartId %>"
        });
        console.log("aaaaaaaaaaaaaaaaaaaaaaaaa",response);
        const data = response.data;
  
        

        if (data.success) {
            const options = {
                "key": data.razorpayKey,
                "amount": data.order.amount,  // Correct amount after coupon is applied
                "currency": "INR",
                "name": "PerfumParadise",
                "description": "Purchase Order",
                "order_id": data.order.id,
                "handler": function (response) {
                    handlePaymentSuccess(
                        response.razorpay_payment_id,
                        response.razorpay_order_id,
                        response.razorpay_signature,
                        couponCode
                    );
                },
                "prefill": {
                    name: data.user.name,
                },
                "theme": {
                    "color": "#3399cc"
                }
            };

            const rzp1 = new Razorpay(options);
            rzp1.on('payment.failed', async function (response) {
                try {
                    const addressId = document.querySelector('input[name="addressId"]:checked').value;
                    let couponCode = document.querySelector('#applied-coupon-name').innerText;
                    couponCode = couponCode === 'No Coupon Applied' ? null : couponCode;

                    // Call the backend to place the order with payment pending status
                    const placeOrderResponse = await axios.post('/order-success', {
                    paymentId: response.error.metadata.payment_id, // Razorpay payment ID (failed)
                    razorpayOrderId: response.error.metadata.order_id, // Razorpay order ID
                    signature: null, // No signature available on failed payment
                    addressId,
                    paymentMethod: 'online-payment',
                    couponCode,
                    cartId: "<%= cartId %>",
                    paymentStatus: 'failed' // Indicating the payment failure
                    });

                    const orderId = placeOrderResponse.data.orderId;

                    // Show a message to the user that the order was placed with payment pending
                    Swal.fire({
                    title: 'Payment Failed',
                    text: 'Your order has been placed, but payment is pending. Please complete the payment from your orders page.',
                    icon: 'warning',
                    confirmButtonText: 'OK'
                    }).then(() => {
                    window.location.href = `/order-success?orderId=${orderId}`;
                    });
                } catch (error) {
                    Swal.fire({
                    title: 'Error!',
                    text: 'Failed to place order after payment failure. Please try again.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                    });
                }
                });

            rzp1.open();
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to initiate the payment. Please try again.',
        });
    }
}

else if (paymentMethodSelected.value === 'cash-on-delivery') {
        // Handle the Cash on Delivery (COD) scenario
        try {
            if (totalPrice > 1000) {
                
                Swal.fire({
                    title: 'Warning!',
                    text: 'Cash on Delivery is not allowed for orders above ₹1000.',
                    icon: 'warning',
                    confirmButtonText: 'OK'
                });
                return; // Stop further execution
            }



           
            const response = await axios.post('/order-success', {
                addressId: addressSelected.value,
                paymentMethod: 'cash-on-delivery',
                couponCode: couponCode === 'No Coupon Applied' ? null : couponCode, 
                cartId: "<%= cartId %>",
                
            });

            const data = response.data;

            if (data.success) {
                Swal.fire({
                    title: 'Order Success!',
                    text: 'Your order has been placed successfully!',
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false,
                }).then(() => {
                    window.location.href = `/order-success?orderId=${data.orderId}`;
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to place order. Please try again.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        } catch (error) {
            console.error('Error placing order:', error);
            Swal.fire({
                title: 'Error!',
                text: 'An error occurred while placing your order. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    }
        });


        async function initiateRepayment(orderId, amount, razorpayOrderId) {
  try {
    // Call the backend to initiate repayment (fetching necessary Razorpay details)
    const response = await axios.post('/initiate-repayment', { orderId });

    if (response.data.success) {
      const options = {
        key: response.data.razorpayKey, // Razorpay key from backend
        amount: Math.round(amount * 100), // Amount in paisa
        currency: 'INR',
        name: 'Your Store Name',
        description: 'Repayment for Order ID: ' + orderId,
        order_id: razorpayOrderId, // Existing Razorpay order ID
        handler: async function (razorpayResponse) {
          await handlePaymentSuccess(
            razorpayResponse.razorpay_payment_id,
            razorpayResponse.razorpay_order_id,
            razorpayResponse.razorpay_signature,
            orderId
          );
        },
        theme: {
          color: '#3399cc'
        }
      };

      const rzp1 = new Razorpay(options);
      rzp1.on('payment.failed', function (response) {
        Swal.fire('Error', 'Payment failed. Please try again.', 'error');
      });
      rzp1.open();
    }
  } catch (error) {
    console.error('Error initiating repayment:', error);
    Swal.fire('Error', 'Failed to initiate repayment. Please try again.', 'error');
  }
}
  
// Function to handle payment success
async function handlePaymentSuccess(paymentId, razorpayOrderId, signature) {
    try {
        let couponCode = document.querySelector('#applied-coupon-name').innerText;
        const placeOrderResponse = await axios.post('/order-success', {
            paymentId,
            razorpayOrderId,
            signature,
            addressId: document.querySelector('input[name="addressId"]:checked').value,
            paymentMethod: 'online-payment',
            couponCode: couponCode === 'No Coupon Applied' ? null : couponCode,  // Pass the applied coupon code
            cartId: "<%= cartId %>"
        });
        console.log('couponCode.....',placeOrderResponse);
        

        const orderId = placeOrderResponse.data.orderId;

        // Then, verify the payment
        const verifyResponse = await axios.post('/verify-payment', {
            paymentId,
            razorpayOrderId,
            signature,
            orderId
        });

        if (verifyResponse.data.success) {
            // If verification is successful, redirect to order success page
            window.location.href = `/order-success?orderId=${orderId}`;
        } else {
            Swal.fire('Payment Verification Failed', verifyResponse.data.message, 'error');
        }
    } catch (error) {
        console.log('Error processing the payment:', error);
        Swal.fire({
            title: 'Error',
            text: 'An error occurred during payment processing. Please try again.',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    }
}

// Handle coupon apply and remove logic
document.querySelector('.apply button').addEventListener('click', async function (event) {
    event.preventDefault();

    const couponCode = document.querySelector('#checkout-discount-input').value;
    
    const cartTotal = parseFloat(document.querySelector('#grand-total').innerText.replace('₹', ''));
    console.log(couponCode);
    

    if (!couponCode) {
        Swal.fire({
            icon: 'warning',
            title: 'No Coupon Entered',
            text: 'Please enter a coupon code to apply.',
        });
        return;
    }

    try {
        const response = await axios.post('/apply-coupon', { couponCode, cartTotal });

        if (response.data.success) {
            document.querySelector('#coupon-discount').innerText = `₹${response.data.discountAmount}`;
            document.querySelector('#applied-coupon-name').innerText = response.data.couponCode;
            document.querySelector('#clear-coupon').style.display = 'block';

            const newTotal = cartTotal - response.data.discountAmount;
            document.querySelector('#grand-total').innerText = `₹${newTotal}`;

            Swal.fire({
                icon: 'success',
                title: 'Coupon Applied',
                text: response.data.message
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Coupon Error',
                text: response.data.message
            });
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to apply coupon. Please try again.'
        });
    }
});

// Handle coupon removal
document.querySelector('#clear-coupon').addEventListener('click', function () {
    // Display a confirmation dialog before removing the coupon
    Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to remove the applied coupon?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, remove it!',
        cancelButtonText: 'Cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            // Remove the coupon after confirmation
            const originalTotal = parseFloat("<%= total %>");
            document.querySelector('#checkout-discount-input').value = '';
            document.querySelector('#coupon-discount').innerText = '₹0';
            document.querySelector('#applied-coupon-name').innerText = 'No Coupon Applied';
            document.querySelector('#grand-total').innerText = `₹${originalTotal}`;
            document.querySelector('#clear-coupon').style.display = 'none'; // Hide the close icon

            // Show a success message after coupon removal
            Swal.fire({
                icon: 'success',
                title: 'Coupon Removed',
                text: 'Your coupon has been successfully removed and the total has been updated.',
            }).then(()=>{
                window.location.reload();
            })
        }
    });
});


</script>



<%- include('../layouts/user/footer.ejs') -%>
